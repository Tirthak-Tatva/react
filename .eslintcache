[{"G:\\Company\\React_Typescript\\tscapp\\src\\App.tsx":"1","G:\\Company\\React_Typescript\\tscapp\\src\\reportWebVitals.ts":"2","G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees.tsx":"3","G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees\\Create.tsx":"4","G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees\\Edit.tsx":"5","G:\\Company\\React_Typescript\\tscapp\\src\\index.tsx":"6","G:\\Company\\React_Typescript\\tscapp\\src\\header\\navbar.tsx":"7","G:\\Company\\React_Typescript\\tscapp\\src\\components\\validationSchema\\ValidationFormSchema.tsx":"8","G:\\Company\\React_Typescript\\tscapp\\src\\i18n.tsx":"9","G:\\Company\\React_Typescript\\tscapp\\src\\components\\LanguageSelector\\LanguageSelector.tsx":"10"},{"size":818,"mtime":1606278495417,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":7472,"mtime":1606278830605,"results":"14","hashOfConfig":"12"},{"size":7006,"mtime":1606393079655,"results":"15","hashOfConfig":"12"},{"size":7456,"mtime":1606374885449,"results":"16","hashOfConfig":"12"},{"size":361,"mtime":1606383022561,"results":"17","hashOfConfig":"12"},{"size":830,"mtime":1606382002024,"results":"18","hashOfConfig":"12"},{"size":568,"mtime":1606374737997,"results":"19","hashOfConfig":"12"},{"size":745,"mtime":1606382897691,"results":"20","hashOfConfig":"12"},{"size":549,"mtime":1606387178284,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ahtkck",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"G:\\Company\\React_Typescript\\tscapp\\src\\App.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\reportWebVitals.ts",[],"G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees.tsx",[],["44","45"],"G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees\\Create.tsx",["46"],"import * as React from 'react';\r\nimport axios from 'axios';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { withTranslation } from 'react-i18next';\r\nimport '../../i18n';\r\n\r\nexport interface IValues {\r\n    id: string,\r\n    first_name: string,\r\n    last_name: string,\r\n    email: string,\r\n    password: string,\r\n}\r\nexport interface IFormState {\r\n    [key: string]: any;\r\n    values: IValues[];\r\n    submitSuccess: boolean;\r\n    loading: boolean;\r\n}\r\nclass Create extends React.Component<RouteComponentProps<any>, IFormState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            team_id: this.props.match.params.id,\r\n            id: '',\r\n            first_name: '',\r\n            last_name: '',\r\n            email: '',\r\n            password: '',\r\n            values: [],\r\n            loading: false,\r\n            submitSuccess: false,\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const { submitSuccess } = this.state;\r\n        // const { t } = this.props;\r\n        return (\r\n            <div>\r\n                {/* {this.props.t(\"hello.label\")} */}\r\n                <div className={\"col-md-12 form-wrapper\"}>\r\n                    <h2> Create Employee </h2>\r\n                    {!submitSuccess && (\r\n                        <div className=\"alert alert-info\" role=\"alert\">\r\n                            Fill the form below to create a new Employee\r\n                        </div>\r\n                    )}\r\n                    {submitSuccess && (\r\n                        <div className=\"alert alert-info\" role=\"alert\">\r\n                            The form was successfully submitted!\r\n                        </div>\r\n                    )}\r\n                    <Formik\r\n                        initialValues={this.state}\r\n                        validationSchema={Yup.object().shape({\r\n                            id: Yup.string()\r\n                                .required('ID is required'),\r\n                            first_name: Yup.string()\r\n                                .required('First Name is required'),\r\n                            last_name: Yup.string()\r\n                                .required('Last Name is required'),\r\n                            email: Yup.string()\r\n                                .email('Email is invalid')\r\n                                .required('Email is required'),\r\n                            password: Yup.string()\r\n                                .required('Password is required')\r\n                                .min(6, 'Password must be at least 6 characters'),\r\n                        })}\r\n                        onSubmit={async values => {\r\n                            this.setState({ loading: true });\r\n                            const formData = {\r\n                                id: values.id,\r\n                                team_id: this.state.team_id,\r\n                                first_name: values.first_name,\r\n                                last_name: values.last_name,\r\n                                email: values.email,\r\n                                password: values.password,\r\n                            }\r\n                            this.setState({ submitSuccess: true, values: [...this.state.values, formData], loading: false });\r\n                            axios.post(`http://localhost:5000/employees`, formData).then(data => [\r\n                                setTimeout(() => {\r\n                                    this.props.history.push('/');\r\n                                }, 1500)\r\n                            ]);\r\n                        }}>\r\n                        {({ errors, touched, isSubmitting }) => {\r\n                            return (\r\n                                <Form>\r\n                                    <div className=\"form-row\">\r\n                                        <div className=\"form-group col-6\">\r\n                                            <label>ID</label>\r\n                                            <Field name=\"id\" type=\"text\" className={'form-control' + (errors.id && touched.id ? ' is-invalid' : '')} />\r\n                                            <ErrorMessage name=\"id\" component=\"div\" className=\"invalid-feedback\" />\r\n                                        </div>\r\n                                        <div className=\"form-group col-6\">\r\n                                            <label>First Name</label>\r\n                                            <Field name=\"first_name\" type=\"text\" className={'form-control' + (errors.first_name && touched.first_name ? ' is-invalid' : '')} />\r\n                                            <ErrorMessage name=\"first_name\" component=\"div\" className=\"invalid-feedback\" />\r\n                                        </div>\r\n                                        <div className=\"form-group col-6\">\r\n                                            <label>Last Name</label>\r\n                                            <Field name=\"last_name\" type=\"text\" className={'form-control' + (errors.last_name && touched.last_name ? ' is-invalid' : '')} />\r\n                                            <ErrorMessage name=\"last_name\" component=\"div\" className=\"invalid-feedback\" />\r\n                                        </div>\r\n                                        <div className=\"form-group col-6\">\r\n                                            <label>Email</label>\r\n                                            <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\r\n                                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-group col-12\">\r\n                                        <label>Password</label>\r\n                                        <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <button type=\"submit\" disabled={isSubmitting} className=\"btn btn-primary\">\r\n                                            {isSubmitting && <span className=\"spinner-border spinner-border-sm mr-1\"></span>}\r\n                                            Save\r\n                                        </button>\r\n                                    </div>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Create;","G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees\\Edit.tsx",["47"],"G:\\Company\\React_Typescript\\tscapp\\src\\index.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\header\\navbar.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\components\\validationSchema\\ValidationFormSchema.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\i18n.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\components\\LanguageSelector\\LanguageSelector.tsx",["48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":6,"column":10,"nodeType":"55","messageId":"56","endLine":6,"endColumn":25},{"ruleId":"53","severity":1,"message":"57","line":4,"column":38,"nodeType":"55","messageId":"56","endLine":4,"endColumn":43},{"ruleId":"53","severity":1,"message":"58","line":6,"column":11,"nodeType":"55","messageId":"56","endLine":6,"endColumn":12},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"@typescript-eslint/no-unused-vars","'withTranslation' is defined but never used.","Identifier","unusedVar","'Field' is defined but never used.","'t' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]