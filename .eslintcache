[{"G:\\Company\\React_Typescript\\tscapp\\src\\App.tsx":"1","G:\\Company\\React_Typescript\\tscapp\\src\\reportWebVitals.ts":"2","G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees.tsx":"3","G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees\\Create.tsx":"4","G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees\\Edit.tsx":"5","G:\\Company\\React_Typescript\\tscapp\\src\\index.tsx":"6","G:\\Company\\React_Typescript\\tscapp\\src\\header\\navbar.tsx":"7","G:\\Company\\React_Typescript\\tscapp\\src\\i18n.tsx":"8","G:\\Company\\React_Typescript\\tscapp\\src\\components\\LanguageSelector\\LanguageSelector.tsx":"9","G:\\Company\\React_Typescript\\tscapp\\src\\components\\validationSchema\\ValidationFormSchema.tsx":"10","G:\\Company\\React_Typescript\\tscapp\\src\\translations\\config.tsx":"11","G:\\Company\\React_Typescript\\tscapp\\src\\translations\\en.tsx":"12"},{"size":818,"mtime":1606278495417,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":5964,"mtime":1606468173049,"results":"16","hashOfConfig":"14"},{"size":6262,"mtime":1606467205843,"results":"17","hashOfConfig":"14"},{"size":7456,"mtime":1606374885449,"results":"18","hashOfConfig":"14"},{"size":277,"mtime":1606459028411,"results":"19","hashOfConfig":"14"},{"size":827,"mtime":1606382756061,"results":"20","hashOfConfig":"14"},{"size":745,"mtime":1606382897691,"results":"21","hashOfConfig":"14"},{"size":946,"mtime":1606468197333,"results":"22","hashOfConfig":"14"},{"size":568,"mtime":1606374737997,"results":"23","hashOfConfig":"14"},{"size":666,"mtime":1606467870494,"results":"24","hashOfConfig":"14"},{"size":64,"mtime":1606467536064,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ahtkck",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"G:\\Company\\React_Typescript\\tscapp\\src\\App.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\reportWebVitals.ts",[],"G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees\\Create.tsx",["53"],"G:\\Company\\React_Typescript\\tscapp\\src\\components\\Employees\\Edit.tsx",["54"],"import * as React from 'react';\r\nimport axios from 'axios';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { Formik, Form, ErrorMessage, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nexport interface IValues {\r\n    [key: string]: any;\r\n}\r\nexport interface IFormState {\r\n    id: number,\r\n    employee: any;\r\n    values: IValues[];\r\n    submitSuccess: boolean;\r\n    loading: boolean;\r\n}\r\nclass EditEmployee extends React.Component<RouteComponentProps<any>, IFormState> {\r\n    constructor(props: RouteComponentProps) {\r\n        super(props);\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            employee: {},\r\n            values: [],\r\n            loading: false,\r\n            submitSuccess: false,\r\n        }\r\n    }\r\n    public componentDidMount(): void {\r\n        axios.get(`http://localhost:5000/employees/${this.state.id}`).then(data => {\r\n            this.setState({ employee: data.data });\r\n        })\r\n    }\r\n    private processFormSubmission = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\r\n        e.preventDefault();\r\n        this.setState({ loading: true });\r\n        axios.patch(`http://localhost:5000/employees/${this.state.id}`, this.state.values).then(data => {\r\n            this.setState({ submitSuccess: true, loading: false })\r\n            setTimeout(() => {\r\n                this.props.history.push('/');\r\n            }, 1500)\r\n        })\r\n    }\r\n    private setValues = (values: IValues) => {\r\n        this.setState({ values: { ...this.state.values, ...values } });\r\n    }\r\n    private handleInputChanges = (e: React.FormEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        this.setValues({ [e.currentTarget.id]: e.currentTarget.value })\r\n    }\r\n    public render() {\r\n        const { submitSuccess, loading } = this.state;\r\n        return (\r\n            <div>\r\n                <div className={\"col-md-12 form-wrapper\"}>\r\n                    <h1> Employee Details Edit</h1>\r\n                    {!submitSuccess && (\r\n                        <div className=\"alert alert-info\" role=\"alert\">\r\n                            Fill the form below to edit Employee\r\n                        </div>\r\n                    )}\r\n                    {submitSuccess && (\r\n                        <div className=\"alert alert-info\" role=\"alert\">\r\n                            Employee's details has been edited successfully\r\n                        </div>\r\n                    )}\r\n                    <Formik\r\n                        initialValues={this.state.employee}\r\n                        validationSchema={Yup.object().shape({\r\n                            id: Yup.string()\r\n                                .required('ID is required'),\r\n                            first_name: Yup.string()\r\n                                .required('First Name is required'),\r\n                            last_name: Yup.string()\r\n                                .required('Last Name is required'),\r\n                            email: Yup.string()\r\n                                .email('Email is invalid')\r\n                                .required('Email is required'),\r\n                            password: Yup.string()\r\n                                .required('Password is required')\r\n                                .min(6, 'Password must be at least 6 characters'),\r\n                        })}\r\n                        onSubmit={async => {\r\n                            this.setState({ loading: true });\r\n                            axios.patch(`http://localhost:5000/employees/${this.state.id}`, this.state.values).then(data => {\r\n                                this.setState({ submitSuccess: true, loading: false })\r\n                                setTimeout(() => {\r\n                                    this.props.history.push('/');\r\n                                }, 1500)\r\n                            })\r\n                        }}>\r\n\r\n                        {({ errors, touched }) => {\r\n                            return (\r\n                                <Form id={\"create-post-form\"} onSubmit={this.processFormSubmission} noValidate={true}>\r\n                                    <div className=\"form-group col-md-12\">\r\n                                        <label htmlFor=\"first_name\"> First Name </label>\r\n                                        <input type=\"text\" id=\"first_name\" defaultValue={this.state.employee.first_name} onChange={(e) => this.handleInputChanges(e)} name=\"first_name\" className={'form-control' + (errors.first_name && touched.first_name ? ' is-invalid' : '')} placeholder=\"Enter employee's first name\" />\r\n                                        <ErrorMessage name=\"first_name\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-12\">\r\n                                        <label htmlFor=\"last_name\"> Last Name </label>\r\n                                        <input type=\"text\" id=\"last_name\" defaultValue={this.state.employee.last_name} onChange={(e) => this.handleInputChanges(e)} name=\"last_name\" className={'form-control' + (errors.first_name && touched.first_name ? ' is-invalid' : '')} placeholder=\"Enter employee's last name\" />\r\n                                        <ErrorMessage name=\"last_name\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-12\">\r\n                                        <label htmlFor=\"email\"> Email </label>\r\n                                        <input type=\"email\" id=\"email\" defaultValue={this.state.employee.email} onChange={(e) => this.handleInputChanges(e)} name=\"email\" className={'form-control' + (errors.first_name && touched.first_name ? ' is-invalid' : '')} placeholder=\"Enter employee's email address\" />\r\n                                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-12\">\r\n                                        <label htmlFor=\"password\"> Password </label>\r\n                                        <input type=\"password\" id=\"password\" defaultValue={this.state.employee.password} onChange={(e) => this.handleInputChanges(e)} name=\"password\" className={'form-control' + (errors.first_name && touched.first_name ? ' is-invalid' : '')} placeholder=\"Enter employee's password number\" />\r\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group col-md-4 pull-right\">\r\n                                        <button className=\"btn btn-success\" type=\"submit\">\r\n                                            Edit Employee </button>\r\n                                        {loading &&\r\n                                            <span className=\"fa fa-circle-o-notch fa-spin\" />\r\n                                        }\r\n                                    </div>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(EditEmployee);\r\n\r\n\r\n\r\n\r\n\r\n",["55","56"],"G:\\Company\\React_Typescript\\tscapp\\src\\index.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\header\\navbar.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\i18n.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\components\\LanguageSelector\\LanguageSelector.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\components\\validationSchema\\ValidationFormSchema.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\translations\\config.tsx",[],"G:\\Company\\React_Typescript\\tscapp\\src\\translations\\en.tsx",["57"],"export default {\r\n  hello: \"Hello\",\r\n  thankyou: \"Thank you\"\r\n};",{"ruleId":"58","severity":1,"message":"59","line":5,"column":10,"nodeType":"60","messageId":"61","endLine":5,"endColumn":25},{"ruleId":"58","severity":1,"message":"62","line":4,"column":38,"nodeType":"60","messageId":"61","endLine":4,"endColumn":43},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":1,"nodeType":"69","endLine":4,"endColumn":3},"@typescript-eslint/no-unused-vars","'withTranslation' is defined but never used.","Identifier","unusedVar","'Field' is defined but never used.","no-native-reassign",["70"],"no-negated-in-lhs",["71"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]